this is new change!

实验四 选做题
#include<iostream>
using namespace std;

int main(void)
{float x1=2,x2=3,t,k;
 t=(x1+x2)/2;
 while ((int)(t*(1.0e8))%10==0)
 { 
   k=t*t*t-6*t-1;
   if(k>0) {x2=t;t=(x1+x2)/2;}
   else if(k<0) {x1=t;t=(x1+x2)/2;}
        else cout<<t;
 }
 cout<<t;
 return 0;
}

实验四 第4题

加密程序
#include<iostream>
using namespace std;

int main()
{char c1;
 cout<<"请输入明文:#";
 do
 {cin.get(c1);
  if(c1>='a'&&c1<='v') c1+=4;
	  else if(c1>='w'&&c1<='z') c1-=22;
  cout<<c1;
 }while(c1!='#');
	 return 0;
}



书 115页第5题

#include<iostream>
using namespace std;

int f(int m,int n)
{int i,max,p;
 if(m>n) p=m;
 else p=n;
 for(i=1,max=1;i<=p/2;i++)
	 if(m%i==0&&n%i==0)
	 {if(i>max) max=i;}
 return max;
}
int main()
{int m,n;
 cout<<"输入两个正整数："<<endl;
 cin>>m>>n;
 cout<<"这两个数的最大公约数是："<<f(m,n)<<endl;
 cout<<"这两个数的最小公倍数是："<<m*n/f(m,n)<<endl;
 return 0;
}

书 115页第6题
#include<iostream>
using namespace std;

int f(int p)
{int q,n,s;
 for(n=1,s=0;s<=p;n++)
	 s+=n*n;
 return n-1;
}
int main()
{int p=1000;
 cout<<f(p);
 return 0;
}

书 115页第4题
#include<iostream>
using namespace std;

double f(int n)
{int i;
 double s,p;
 for(i=0,p=1,s=0;i<n;i++)
 { p*=1.0/++i;
   s+=p;
 }
 return s;
}
int main()
{cout<<"1+1/2!+1/3!="<<f(3)<<endl;
 cout<<"1+1/2!+1/3!+...+1/10!="<<f(10);
 return 0;
}


计算水仙花数

#include<iostream>
using namespace std;

int main()
{int a,b,t,s;
 for(a=100;a<=999;a++)
	{ for(b=a,s=0;b!=0;b/=10)
	 {t=b%10;
	  s+=t*t*t;
	 }
      if(s==a) cout<<a<<endl; 
 }
 return 0;
}


找出100到200的素数之和
#include<iostream>
#include<cmath>
using namespace std;

int main()
{int a,j,s=0,p;
 double i; 
 for(a=100;a<=200;a++)
 {for(j=2,p=2,i=sqrt(a);j<=i;j++)
	 { if(a%j==0) p++;}
  if(p==2) s+=a;
 }
 cout<<s<<endl;
 return 0;
}


书 115页第10题
#include<iostream>
#include<cmath>
using namespace std;

int prime(int i)
{int j,p;
 for(j=2,p=2;j<=sqrt(i);j++)
	 if(i%j==0) p++;
 if(p==2) return i;
}

int main()
{int i,j,k;
    cout<<"输入任一大于2小于等于1000的偶数：";
    cin>>i;
    for(j=2;j<=1000;j++)
    for(k=2;k<=1000;k++)
		 if(prime(j)+prime(k)==i)
			 cout<<i<<"="<<j<<"+"<<k<<"猜想成立"<<endl;
 return 0;
}

书 116页第19题

#include<iostream>
using namespace std;

inline int sum(int n)
{if(n==1) return 1;
 else return n+sum(n-1);
}

int main(void)
{ cout<<sum(10)<<" "<<sum(20);
  return 0;
}


实验六 函数（2）第一题
（1）
#include<iostream>
using namespace std;

inline int max(int a,int b)
{return a>b? a:b;}

inline double max(double a,double b)
{return a>b? a:b;}

int main()
{int a,b;
 double x,y;
 cin>>a>>b>>x>>y;
 cout<<max(a,b)<<'\n'<<max(x,y);
 return 0;
}
（2）
#include<iostream>
using namespace std;

inline int max(int a,int b)
{return a>b? a:b;}

inline double max(double a,double b)
{return a>b? a:b;}

int main()
{int a,b,c;
 double x,y,z;
 cin>>a>>b>>c;
 cin>>x>>y>>z;
 a=max(a,b);
 a=max(a,c);
 x=max(x,y);
 x=max(x,z);
 cout<<a<<'\n'<<x;
 return 0;
}



实验五 函数（1）第二题
#include<iostream>
#include<cmath>
using namespace std;
 
int f(int i)
{int j,p;
 for(j=2,p=2;j<=sqrt(i);j++)
	 if(i%j==0) p++;
 if(p==2) return i;
 else return 0;
}
int main()
{int a;
 for(a=2;a<=100;a++)
	if(f(a))
		if(f(a+2)!=0&&a<=98) cout<<a<<"和"<<a+2<<endl; 
 return 0;
}


实验六 函数（2）第二题
（1）

#include<iostream>
#include<cmath>
using namespace std;
int root(float a,float b,float c,float* px1,float* px2)
{float d;
 d=b*b-4*a*c;
 if(d<0) return 0;
 *px1=(-b+sqrt(d))/(2*a);
 *px2=(-b-sqrt(d))/(2*a);
 if(d==0) return 1;
 else return 2;
}
int main()
{float x1,x2,a,b,c;
 cout<<"请输入a,b,c："<<endl;
 cin>>a>>b>>c;
 if(a==0){cout<<"输入有误，请重新输入";cin>>a>>b>>c;}
 cout<<root(a,b,c,&x1,&x2);
 cout<<"\nx1="<<x1<<"\nx2="<<x2;
 return 0;
}
总结：return只能返回一个值
（2）
#include<iostream>
#include<cmath>
using namespace std;
int root(float a,float b,float c,float&rx1,float&rx2)
{float d;
 d=b*b-4*a*c;
 if(d<0) return 0;
 rx1=(-b+sqrt(d))/(2*a);
 rx2=(-b-sqrt(d))/(2*a);
 if(d==0) return 1;
 else return 2;
}
int main()
{float x1,x2,a,b,c;
 cout<<"请输入a,b,c："<<endl;
 cin>>a>>b>>c;
 if(a==0){cout<<"输入有误，请重新输入";cin>>a>>b>>c;}
 cout<<root(a,b,c,x1,x2);
 cout<<"\nx1="<<x1<<"\nx2="<<x2;
 return 0;
}

书130页第七题
#include<iostream>
using namespace std;
#define Max(a,b) if(a>b) m=a;else m=b;
#define Min(a,b) if(a<b) m=a;else m=b;
int main()
{float a,b,c,m;
 cout<<"请输入三个实数：";
 cin>>a>>b>>c;
 Max(a,b)
 Max(m,c)
 cout<<"最大值是："<<m;
 Min(a,b)
 Min(a,b)
 cout<<"最小值是："<<m;
 return 0;
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
书130页第九题
my.h
#if ! def(H)
#define H
int root(float a,float b,float c,float* px1,float* px2);
#endif


my.cpp
#include"my.h"
#include<cmath>
int root(float a,float b,float c,float* px1,float* px2)

{float d=b*b-4*a*c;
 if(d<0) return 0;
 *px1=(-b+sqrt(d))/(2*a);
 *px2=(-b-sqrt(d))/(2*a);
 if(d==0) return 1;
 else return 2;
}


mymain.cpp
#include<iostream>
using namespace std;
#include"my.h"

int main(void)
{float x1,x2,a,b,c;
 cout<<"请输入a,b,c:"<<endl;
 cin>>a>>b>>c;
 if(a==0){cout<<"输入有误，请重新输入：";cin>>a>>b>>c;}
 cout<<root(a,b,c,&x1,&x2);
 cout<<"\nx1="<<x1<<"\nx2="<<x2;
 return 0;
}






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


7-2
（二维数组）
#include<iostream>
using namespace std;
int main()
{float M[2][8],sum=0;int i,j;
 for(i=0;i<8;i++)
 {cout<<"请输入第"<<i+1<<"号商品的数量和单价";
  for(j=0;j<2;j++) cin>>M[j][i];
  sum+=(M[0][i])*(M[1][i]);
}    
 cout<<"该部这一天的总销售额为："<<sum;
 return 0;
}

(一维数组)
#include<iostream>
using namespace std;
int main()
{float M[16],sum=0;int i,j=0;
 for(i=0;i<8;i++)
 {cout<<"请输入第"<<i+1<<"号商品的数量和单价:";
  cin>>M[j]>>M[j+1];
  sum+=M[j]*M[j+1],j+=2;
 }    
 cout<<"该部这一天的总销售额为："<<sum;
 return 0;
}




7-3
#include<iostream>
using namespace std;
int main()
{int i,n,m,N[5]={0};
 cout<<"请输入学生人数:";cin>>m;
 int(*M)[2]=new int[m][2];
 if(!M) {cout<<"未申请到动态内存!";return 1;} 
 for(n=0;n<m;n++)
 {cout<<"请输入第"<<n+1<<"位学生的学号和成绩："<<endl;
  for(i=0;i<2;i++)  cin>>M[n][i]; 
 }
 for(n=0;n<m;n++)
 {cout<<'\n'<<M[n][0]<<'\t';
  if(M[n][1]>90) {cout<<"成绩为1级";N[0]=N[0]+1;}
    else if(M[n][1]>=80){cout<<"成绩为2级";N[1]++;}
    else if(M[n][1]>=70){cout<<"成绩为3级";N[2]++;}
	else if(M[n][1]>=60){cout<<"成绩为4级";N[3]++;}
    else {cout<<"成绩为5级";N[4]++;}
 }
  cout<<"\n成绩为1级的有："<<N[0]<<"人"<<endl;
  cout<<"成绩为2级的有："<<N[1]<<"人"<<endl;
  cout<<"成绩为3级的有："<<N[2]<<"人"<<endl;
  cout<<"成绩为4级的有："<<N[3]<<"人"<<endl;
  cout<<"成绩为5级的有："<<N[4]<<"人"<<endl; 
  delete []M;
return 0;
}




7-8
#include<iostream>
using namespace std;

 void MP(int a[])
{int m,n,t;
 for(m=1;m<6;m++)
    for(n=0;n<6-m;n++)
	 if(a[n]<a[n+1])t=a[n+1],a[n+1]=a[n],a[n]=t;	 
 }

int main()
{int i,j,M[6];
 cout<<"请输入一个六位整数：";
 cin>>i;
 for(j=0;j<6;j++)
 {M[j]=i%10;i/=10;}
 MP(M);
 for(j=0;j<6;j++) cout<<M[j];
 return 0;
}

(2)改进后
#include<iostream>
using namespace std;

 void MP(char *a)
{int m,n;char t;
 for(m=1;m<6;m++)
    for(n=0;n<6-m;n++)
	 if(a[n]<a[n+1]) t=a[n+1],a[n+1]=a[n],a[n]=t;	 
 }

int main()
{char *p=new char[7];//若将7改为6，则运算出错
if(!p) {cout<<"未申请到动态内存!";return 1;}
 cout<<"请输入一个六位整数：";
 cin>>p;
 MP(p);
 cout<<p;
 delete p;
 return 0;
}
//对于字符型动态数组，delete释放到\0为止



7-9
#include<iostream>
using namespace std;
int main()
{int m,n,i,j,k,c;
 cout<<"请分别输入整数集合a,b中的元素个数：";
 cin>>m>>n;
 int *a=new int[m+n];
 if(!a) {cout<<"未申请到动态内存!";return 1;}
 int *b=new int[n];
 if(!b) {cout<<"未申请到动态内存!";return 2;}
 cout<<"请输入数组a中的元素:";
 for(i=0;i<m;i++) 
 {cin>>a[i];
  if(i) {for(j=0;j<i;j++) //检查集合输入的是否规范（是否有重复，下同）
	      if(a[i]==a[j]) {cout<<"输入有误(元素不可重复)!请重新输入!";return 3;}
        } 
 }
 cout<<"请输入数组b中的元素:";
 for(i=0;i<n;i++) 
 {cin>>b[i];
  if(i) {for(j=0;j<i;j++) 
	      if(b[i]==b[j]) {cout<<"输入有误(元素不可重复)!请重新输入!";return 4;}
        }
 }
 //找出b中与a中的不同元素并放入a中,得并集
 for(i=0,c=m;i<n;i++)
	{for(j=0,k=1;j<m;j++)
      if(b[i]==a[j]) {k=0;break;}
	 if(k) a[c]=b[i],c++;
	}
for(i=0;i<c;i++) cout<<a[i]<<' ';
delete a;delete b;
return 0;
}


7-10
#include<iostream>
using namespace std;
int main()
{int i,j,n;
 cout<<"输入原来数列的长度：";
 cin>>n;
 float *M=new float[n+1];
 if(!M) {cout<<"未申请到动态内存!";return 1;}
 cout<<"请输入原数列(升序）：";
 for(i=0;i<n;i++) cin>>M[i];
 cout<<"请输入要插入的数：";cin>>j;
 for(i=n-1;i>=0;i--)
 {if(j<=M[i]) M[i+1]=M[i];
 else {M[i+1]=j;break;}
 }
 cout<<"插入后的数组是：";
  for(i=0;i<n+1;i++)
	  cout<<M[i]<<'\t';
  delete []M;
 return 0;
}



7-11

#include<iostream>
using namespace std;
int main()
{int i,n,m;
cout<<"请输入学生总人数:";cin>>m;
int (*M)[3]=new int[m][3];
cout<<"\t学号\t"<<"分\t"<<"秒"<<endl; 
for(i=0;i<m;i++)
 {cout<<"第"<<i+1<<"位：";
  for(n=0;n<3;n++) cin>>M[i][n];	 
 }
 for(n=0;n<m;n++)
 {if((M[n][1]*60+M[n][2])>230) {cout<<M[n][0]<<"号未达标，成绩为："
	                            <<M[n][1]<<"分"<<M[n][2]<<"秒"<<endl;}
  else cout<<"全部都达标";
 }
 delete []M;
 return 0;
}




7-13
#include<iostream>
using namespace std;

int main()
{int max,min,*N,m,n,i,j,**p,q[4]={0};
 cout<<"请输入行数和列数：";cin>>m>>n;
 p=new int*[m];
 if(!p) {cout<<"未申请到动态内存!";return 1;}
 for(i=0;i<m;i++)
 {p[i]=new int[n];//动态分配内存p[i]之间不连续
 if(!p[i]) {cout<<"未申请到动态内存!";return 2;}
 cout<<"请输入第"<<i+1<<"行数据（共"<<n<<"个）："<<endl;
 for(j=0;j<n;j++) cin>>p[i][j];
 }
 for(j=0,max=min=**p;j<m;j++)
 {for(i=0,N=p[j];i<n;i++,N++)	 
 {if(max<=*N) {max=*N,q[0]=j+1,q[1]=i+1;}
  if(min>=*N) {min=*N,q[2]=j+1,q[3]=i+1;}//得使用">="和"<=",而不是">"和"<",否则有可能会出现q[]中有空缺现象
 }
 }
 cout<<"最大值为："<<max<<"在第"<<q[0]<<"行,第"<<q[1]<<"列\n";
 cout<<"最小值为："<<min<<"在第"<<q[2]<<"行,第"<<q[3]<<"列";
 for(i=0;i<m;i++) delete p[i];
 delete p;
return 0;
}


7-16
#include<iostream>
#include<cstring>
using namespace std;
int mystrcmp(char a[],char b[])
{int n,m,i;
 m=strlen(a)+1;
 n=strlen(b)+1;
 if(n<=m) m=n;
 for(i=0;i<m;i++)
 {if(a[i]>b[i]) return 1;
  else if(a[i]<b[i]) return -1;
 }
 return 0;
}
int main()
{char a[1024],
      b[1024];
cout<<"请输入第一个字符串:";
cin.getline(a,1024);
cout<<"请输入第二个字符串:";
cin.getline(b,1024);
cout<<mystrcmp(a,b);
 return 0;
}
(2)改进型
#include<iostream>
#include<cstring>
using namespace std;
int mystrcmp(char a[],char b[])
{int m,i;
 m=strlen(a)+1;
 for(i=0;i<m;i++)
 {if(a[i]>b[i]) return 1;
  else if(a[i]<b[i]) return -1;
 }
 return 0;
}
int main()
{char a[1024],
      b[1024];
cout<<"请输入第一个字符串:";
cin.getline(a,1024);
cout<<"请输入第二个字符串:";
cin.getline(b,1024);
cout<<mystrcmp(a,b);
 return 0;
}

(3)//考虑字符串中含有空格的情况
#include<iostream>
#include<cstring>
using namespace std;
int mystrcmp(char a[],char b[],int m)
{int i;
 for(i=0;i<m;i++)
 {if(a[i]>b[i]) return 1;
  else if(a[i]<b[i]) return -1;
 }
 return 0;
}
int main()
{char *s=new char[100];int i,j;
//考虑字符串中含有空格的情况//用cin.getline输入后，计算长度时，空格算在其中
cout<<"请输入第一个字符串:"; cin.getline(s,100);
i=strlen(s)+1;
char *a=new char[i];
if(!a) {cout<<"未申请到动态内存!";return 1;}
strcpy(a,s);
cout<<"请输入第二个字符串:"; cin.getline(s,100);
j=strlen(s)+1;
char *b=new char[j];
if(!b) {cout<<"未申请到动态内存!";return 2;}
strcpy(b,s);
cout<<mystrcmp(a,b,i);
delete a;
delete b;
delete s;  
return 0;
}





8-1
反例
#include<iostream>
using namespace std;

void swap(float *a,float *b)
{float *c;
 c=a;a=b;b=c;
}
void sort3(float * p,int n)
{int i,j,t;
 for(i=0;i<n-1;i++)
 {for(j=i+1;j<n;j++)
  if(p[i]>p[j]) {t=p[i],p[i]=p[j],p[j]=t;}
 }//为什么swap不能调用  答：因为实参为指针常量，不能进行赋值操作	
}
void sortn(float * p,int n)
{int i,j,t;
 for(i=0;i<n-1;i++)
 {for(j=i+1;j<n;j++)
  if(p[i]>p[j]) {t=p[i],p[i]=p[j],p[j]=t;}
 }
}
int main()
{float a[3],b[7],* p;int i;
 cout<<"请输入前三个数：";
 for(i=0;i<3;i++) cin>>a[i];
 cout<<"请输入后七个数：";
 for(i=0;i<7;i++) cin>>b[i];
 sort3(a,3);
 sortn(b,7);
 for(p=a,i=0;i<3;i++) cout<<*p++<<'\t';
 for(p=b,i=0;i<7;i++) cout<<*p++<<'\t';
 return 0;
}


正确解答：
#include<iostream>
using namespace std;

void swap(float *a,float *b)
{float c;
 c=*a;*a=*b;*b=c;
}
void sort3(float *a,float *b,float *c)
{if(*a>*b) swap(a,b);
 if(*a>*c) swap(a,c);
 if(*b>*c) swap(b,c);	
}
void sortn(float * p,int n)
{int i,j,t;
 for(i=0;i<n-1;i++)
 {for(j=i+1;j<n;j++)
  if(p[i]>p[j]) {t=p[i],p[i]=p[j],p[j]=t;}
 }
}
int main()
{float a[10],* p;int i;
 cout<<"请输入10个数：";
 for(i=0;i<10;i++) cin>>a[i];
 sort3(a,a+1,a+2);
 sortn(a+3,7);
 for(p=a,i=0;i<3;i++) cout<<*p++<<' ';
 cout<<endl;
 for(;i<10;i++) cout<<*p++<<' ';
 return 0;
}


8-2

#include<iostream>
#include<cstring>
using namespace std;

void H(char *p[],int n)
{int i,j,k;char *t;
 for(i=0;i<n-i;i++)
 {for(j=i+1,k=i;j<n;j++)
	 if(strcmp(p[k],p[j])>0) k=j;
  if(k!=i) t=p[i],p[i]=p[k],p[k]=t;
 }
}
int main()
{char b[100][1000],*g[100];int n,i;
 cout<<"请输入字符串个数：";
 cin>>n;
 for(i=0;i<n;cin>>b[i],g[i]=b[i],i++) cout<<"请输入第"<<i+1<<"个字符：";
 H(g,n);
 for(i=0;i<n;i++) cout<<g[i]<<endl;
 return 0;
}
(2)改
#include<iostream>
#include<cstring>
using namespace std;

void H(char *p[],int n)
{int i,j,k;char *t;
 for(i=0;i<n-i;i++)
 {for(j=i+1,k=i;j<n;j++)
	 if(strcmp(p[k],p[j])>0) k=j;
  if(k!=i) t=p[i],p[i]=p[k],p[k]=t;
 }
}
int main()
{int n,i;
 cout<<"请输入字符串个数：";
 cin>>n;
 char **g=new char*[n];
 if(!g){cout<<"未申请到动态内存!";return 1;}
 for(i=0;i<n;g[i]=new char[100],cin>>g[i],i++) cout<<"请输入第"<<i+1<<"个字符串：";
 H(g,n);
 for(i=0;i<n;i++) cout<<g[i]<<endl,delete g[i];
 delete g;
 return 0;
}



8-3
#include<iostream>
using namespace std;

int insert_sort(float *p,int n,float x)
{int i;
 for(i=n-1;i>=0;i--)
 {if(x<=p[i]) {p[i+1]=p[i];if(i==0) p[i]=x;}   
  else {p[i+1]=x;break;}
 }
 n++;
 return n;
}
int main()
{float x;int m,n,j;
 cout<<"请输入数的总个数：";
 cin>>m;
 float *M=new float[m];
 if(!M) {cout<<"未申请到动态内存!";return 1;}
 cout<<"请输入第一个数：";cin>>M[0];
 for(j=1,n=1;j<m;j++)
 {cout<<"请输入下一个数：";
  cin>>x;
  n=insert_sort(M,n,x);
 }
 for(j=0;j<m;j++)
	 cout<<M[j]<<'\t';
 delete M;
 return 0;
}



8-5
#include<iostream>
#include<cstring>
using namespace std;

void sappend(char a[],char b[])
{int m,n,i;char *p;
 m=strlen(a);
 n=strlen(b);
 p=a+m;
 for(i=0;i<n;i++)
 *p++=*(b+i);
}
int main()
{char a[20],b[10];
 cout<<"请输入基字符串：";cin>>a;
 cout<<"请插入目标字符串：";cin>>b;
 sappend(a,b);
 cout<<"插入后的字符串为："<<a;
 return 0;
}
//a的输出有问题

(2)改进型（字符串中可包含空格）
#include<iostream>
#include<cstring>
using namespace std;

void sAppend(char a[],char b[],int m)
{strcpy(a+m,b);}
 
int main()
{char *s=new char[100];int i,j;
 
 cout<<"请插入目标字符串(from)：";cin.getline(s,50);
 j=strlen(s)+1;
  char *from=new char[j];
 if(!from) {cout<<"未申请到动态内存!";return 2;}
 strcpy(from,s);
 
 cout<<"请输入基字符串(to)：";cin.getline(s,50);
 i=strlen(s);
 char *to=new char[i+j];
 if(!to) {cout<<"未申请到动态内存!";return 1;}
 strcpy(to,s);
 
 sAppend(to,from,i);
 cout<<"插入后的字符串为："<<to;
 delete from;
 delete to;
 delete s;
 return 0;
}

(3)改进  参考书177页例8.18





8-10
#include<iostream>
using namespace std;

void Input(int *p)
{int i;
 for(i=0;i<36;i++)
		 cin>>*p++;
}


float Average(int *p)
{int sum=0,i;float t;
 for(i=0;i<36;i++)
	 sum+=*p++;
 t=sum/36;
 return t;
}


int Max(int(*p)[6],int n,int*t,int*q)
{int i,j,k=**p;
 for(i=0;i<n;i++)
	 for(j=0;j<6;j++)
		 if(k<p[i][j]) {k=p[i][j]y;*t=i+1;*q=j+1;}
		 return k;
}


int main()
{int a[6][6],m=0,n=0;float s=0;
 Input(a[0]);
 cout<<"平均值是："<<Average(a[0])<<endl;
 cout<<"最大值是:"<<Max(a,6,&m,&n);
 cout<<"\t在第"<<m<<"行，第"<<n<<"列";
 return 0;
}

//最后两个“cout”不可接在一起，否则m与n输出值等于初始值


8-12
#include<iostream>
#include<cstdlib>
using namespace std;
int main(int argc,char *argv[])
{
	int s=0,Arg1,Arg2;
	if(argc<4) {cout<<"非法操作，正确的用法为：e10_12 第一操作数 操作符 第二操作符。";exit(2);}
	Arg1=atoi(argv[1]);
	Arg2=atoi(argv[3]);
	switch(*argv[2])
	{
	case'+':s=Arg1+Arg2;break;
	case'-':s=Arg1-Arg2;break;
	case'*':s=Arg1*Arg2;break;
	case'/':s=Arg1/Arg2;break;
	default:cout<<"输入有误!\n";
	}
	cout<<Arg1<<argv[2]<<Arg2<<'='<<s<<endl;
	return 0;
}







8-14
#include<iostream>
#include<cmath>
#include<iomanip>
using namespace std;

float root(float(* f)(float),float a,float b)
{do{if(f((a+b)/2)) {if(f((a+b)/2)*f(a)>0) a=(a+b)/2;
                   else b=(a+b)/2;}
   else return (a+b)/2;
 }while(fabs(a-b)>1e-6);
 return (a+b)/2;
}
float f1(float x) {return x*x*x-6*x-1;}
int main()
{cout<<"函数在x=2附近的一个实根为："<<setprecision(6)<<root(f1,2,3);
 return 0;
}
//精确度e-8运算量太大，故输出较慢





8-15
#include<iostream>
#include<cstring>
using namespace std;

void H(char*p[],int n)
{int i,j;char *q;
 for(i=0;i<n-1;i++)
	 for(j=i+1;j<n;j++)
		 if(strcmp(p[i],p[j])<0)
		 {q=p[i];p[i]=p[j];p[j]=q;}
}

void Input(char*p[],int n)
{int i;char *s=new char[100];
 for(i=0;i<n;i++)
 {cout<<"请输入第"<<i+1<<"个字符：";
 cin>>s; 
 p[i]=new char[strlen(s)+1];
 strcpy(p[i],s);
 }
 delete s;
}


int main()
{int n,i;
 cout<<"请输入字符个数：";
 cin>>n;
 char **p=new char*[n];
 Input(p,n);
 H(p,n);
 for(i=0;i<n;i++) cout<<p[i]<<endl,delete p[i];
 delete p;
 return 0;
 }                                         




8-16
#include<iostream>
using namespace std;


void Input(int m,int n,int**s)
{for(int i=0;i<m;i++)
   for(int j=0;j<n;j++)
	   cin>>s[i][j];
}

int** Matrimp(int m,int n,int p)
{//矩阵的建立
 int i;
 int **A=new int*[m];
 int **B=new int*[n];
 int **C=new int*[m];

 for(i=0;i<m;i++)
 {	A[i]=new int[n];
	C[i]=new int[p];
    for(int k=0;k<p;k++) C[i][k]=0;//初始化C中成员，否则L处将出错(因"+="的缘故）！！！ 
 }
 for(i=0;i<n;i++)
	 B[i]=new int[p];

 
//矩阵数据的输入 
 cout<<"请输入A矩阵数据：";
Input(m,n,A);                 //M  见注解
                              
cout<<"请输入B矩阵数据：";
Input(n,p,B);                //N  见注解


//矩阵的乘法运算
for(i=0;i<m;i++)
{for(int j=0;j<p;j++)
   for(int k=0;k<n;k++)
    C[i][j]+=A[i][k]*B[k][j]; // L
}
for(i=0;i<m;i++) delete A[i];delete A;
for(i=0;i<n;i++) delete B[i];delete B;
return C;
}



int main()
{int m,n,p,**t;
 cout<<"请输入m,n,p()";
 cin>>m>>n>>p;
 t=Matrimp(m,n,p);
 for(int i=0;i<m;i++)
 {for(int j=0;j<p;j++)
    cout<<t[i][j] <<' ';
  cout<<endl;
  delete t[i];
}
delete t; 
return 0;
}


//注：此处若用“M   for(i=0,t=A[0];i<m*n;i++) cin>>*t++;
//              N   for(i=0,t=B[0];i<n*p;i++) cin>>*t++;”将出错（当m不等于1时），
//    因每一行（即A[i]）动态分配的内存不连续，故不可将二维数组看做一维数组来做






9-3
#include<iostream>
#include<cmath>
using namespace std;
struct point {float x,y,z;};
int main()
{point d1,d2;float d;
 cout<<"请输入第1个点的坐标：";
  cin>>d1.x>>d1.y>>d1.z;
 cout<<"请输入第2个点的坐标：";
  cin>>d2.x>>d2.y>>d2.z;
 d=sqrt((d1.x-d2.x)*(d1.x-d2.x)+(d1.y-d2.y)*(d1.y-d2.y)+(d1.z-d2.z)*(d1.z-d2.z));
 cout<<"两点间的距离为："<<d;
 return 0;
}
//考虑输入时用数组；



9-4
#include<iostream>
using namespace  std;

struct F{
	int SHI;
	int XU;
};

void READ(F &num)				//注意&num
{
	cout<<"实部:";cin>>num.SHI;
	cout<<"虚部:";cin>>num.XU;
}

void PRINT(F num)
{
	cout<<num.SHI<<"+"<<num.XU<<"i"<<endl;
}

void ADD(F num1,F num2)
{
	cout<<(num1.SHI+num2.SHI)<<"+"<<(num1.XU+num2.XU)<<"i"<<endl;
}

void SUBTRACT(F num1,F num2)
{
	cout<<(num1.SHI-num2.SHI)<<"+"<<(num1.XU-num2.XU)<<"i"<<endl;
}

int main()
{
	F num1,num2;
	cout<<"请输入num1:\n";
	READ(num1);
	PRINT(num1);
	cout<<"请输入num2:\n";
	READ(num2);
	PRINT(num2);
	cout<<"num1+num2=";
	ADD(num1,num2);
	cout<<"num1-num2=";
	SUBTRACT(num1,num2);
	return 0;
}


	

9-5
#include<iostream>
using namespace std;

struct time{
	int year;
	int month;
	int day;
	int week;
};

int COUNTDAY(time &TIME)						//求某一日期所表示的那一天在那一年中的天数
{
	int t,s=0,m=TIME.month;						//t为闰年标志 闰年时t为1 否则为2    //s记录天数
	if(TIME.month<2) return TIME.day;			//1月份的情况
	else if(TIME.month==2) return (TIME.day+31);//2月份的情况
	else										
	{						
		if((TIME.year%4==0)&&(TIME.year%100)||(TIME.year%400==0)) t=1;		
		else t=2;
		if(m<=7)								//3~7月份的情况
		{
			s=(m/2)*30+(m-m/2)*31-t;			//m/2为偶数月 m-m/2为奇数月 
		}
		else									//8~12月份的情况 
		{
			m-=7;								
			s=(m/2)*31+(m-m/2)*30+214-t;		//214-t 为前七个月的总天数
		}
	}
	return s;
}

int COUNTWEEK(time &TIME)
{
	int c=COUNTDAY(TIME);																//c是该日期在该年中的天数
	TIME.week=(TIME.year-1)+(TIME.year-1)/4-(TIME.year-1)/100+(TIME.year-1)/400+c;		//!!!!!!!!!记住此公式:“由日期计算星期”!!!!!!!!!!
	return TIME.week%7;
}


int main()
{																					
	char weekday[7][10]={"sunday","monday","tuesday","wednesday","thursday","friday","saturday"};
	time mydate;int t=1;
	do{
		cout<<"请输入日期:"<<"	"<<"年	"<<"月	"<<"日	\n"<<"		";
		cin>>mydate.year>>mydate.month>>mydate.day;
		cout<<"It is "<<weekday[COUNTWEEK(mydate)]<<endl;							//cout<<"该日期为星期"<<COUNTWEEK(mydate)<<endl;									
		cout<<"\n是否继续？(退出--0,继续--1):";
		cin>>t;
	}while(t);
	return 0;
}


9-6
#include<iostream>
#include<fstream>
#include<cstring>
using namespace std;


struct student{
	char name[20];
	int age;
	char sex[10];
	float grade;
	student *next;
};


class count{
private:
	int excellent;							//记录实验班学生人数
	student *p;								//记录所有学生信息链表的头指针
	student *p1;							//实验班学生信息链表的头指针
public:
	count(int n=0)
	{
		excellent=n;
		p=new student,p->next=NULL;
		p1=new student,p1->next=NULL;			
	}
	~count()
	{
		student *t,*q;
		for(t=p,q=p->next;q;delete t,t=q,q=q->next);delete t;
		for(t=p1,q=p1->next;q;delete t,t=q,q=q->next);delete t;
		
	}
	void sort(student*,student*);			//链表插入排序函数
	void READ();							//读取学生信息
	void H();								//H统计成绩高于分数线20分的学生					
	void S(float &s,float &i,float &j);		//s用来统计男女生人数比例
	void CREAT(float s,float i,float j);	//筛选函数//筛选出实验班学生 
	void output();							//输出函数
};


void count::sort(student*n,student *m)				//n表示需要插入的节点  //m表示链表头节点
{
	student *t=m->next,*q=m;
	for(;t&&(t->grade>=n->grade);q=t,t=t->next);	//逆序排序	//找到插入位置
	n->next=q->next;
	q->next=n;
}


void count::READ()
{
	ifstream in("f1.txt");
	int t=1;
	cout<<"开始输入学生信息:\n";
//	cout<<"	姓名	年龄	性别	入学成绩	继续(1)/结束(0)\n"<<"	";
	do  
	{
		student *n=new student;
		in>>n->name>>n->age>>n->sex>>n->grade>>t;
		cout<<"	";
		sort(n,p);  
	}while(t);
}


void count::H()
{
	student*t=p->next;
	if(t)
	{
		cout<<"	姓名	年龄	性别	入学成绩\n";
		for(;t;t=t->next)
			if(t->grade>=537) cout<<t->name<<"  "<<t->age<<"  "<<t->sex<<"  "<<t->grade<<endl;
			else 
			{
				cout<<"以上为成绩在537分以上的学生!\n";
				break;							//由于READ函数有排序功能，所以当发现t的grade比n小时就不需要继续往下比较了
			}						
	}
	else cout<<"没有学生信息!";
}



void count::S(float &s,float &i,float &j)		//i和j分别用来统计男女生人数
{
	for(student *t=p->next;t;t=t->next)
	{
		if(strcmp(t->sex,"男")) i++;
		else j++;
	}
	s=i+j;
	i/=s;j=1-i;
}


void count::CREAT(float s,float i,float j)				//i,j分别为男女生的比例
{
	if(excellent>0&&excellent<=s)
	{
		i*=excellent;j=excellent-i;						//此时i,j分别表示实验班男女生的人数
		int boy=0,girl=0;
		for(student *t=p->next;t&&(boy<i||girl<j);t=t->next)
		{
			student *n=new student; (*n)=(*t);			//不能将指针直接赋值!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			if(strcmp(t->sex,"男")) {if(girl<j) girl++;}
			else if(boy<i) boy++;
			sort(n,p1);
		}
	}
	else cout<<"实验班人数输入有误!";	
}




void count::output( )					//m为链表头指针
{
	int i;
	cout<<"输出所有学生信息--1，实验班学生信息--0:";
	cin>>i;
	student*t;							
	if(i) t=p->next;					//i不等于0时 输出所有学生信息
	else  t=p1->next;					//i等于0时 输出实验班学生信息
	cout<<"	姓名	年龄	性别	入学成绩\n";
	for(;t;t=t->next)
		cout<<t->name<<"  "<<t->age<<"  "<<t->sex<<"  "<<t->grade<<endl;
}



int main(void)
{
	int c;float s=0,i=0,j=0;
	cout<<"请输入实验班人数:";
	cin>>c;
	count stuinfro(c);
	stuinfro.READ();				//读取学生信息
	stuinfro.H();					//H统计成绩高于分数线20分的学生					
	stuinfro.S(s,i,j);				//s用来统计男女生人数比例
	stuinfro.CREAT(s,i,j);			//筛选函数//筛选出实验班学生 
	stuinfro.output();				//信息的选择输出
	return 0;
}

***********************************************************************
测试文件f1.txt
ws	15	男	787		1
de	14	男	567		1
ew	15	男	677		1
re	15	男	589		1
fe	14	女	763		1
zr	15	女	668		1
tw	15	男	787		1
dw	15	女	673		1
di	14	女	521		1
fr	14	男	389		1
品牌	15	女	399		1
fi	15	男	488		0
************************************************************************
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>





9-7
#include<iostream>
#include<cstdlib>
#include<fstream>
#include<cstring>
using namespace std;


struct node 
{
	int data;
	node *next;
};


int main()
{
	int i,j=0;fstream in("f1.txt");
	char *p=new char[100];
	node *head=new node,*n,*tail;
	//cout<<"请输入字符串：";
	in.getline(p,100,'#');
	head->next=NULL;
	for(i=0;i<strlen(p);i++)	   	 //注意使用的是小于等于
	{
		if(p[i]>=48&&p[i]<=57)		 //4567g0000h//空格//没有数字
		{
			j=atoi(p+i);
			n=new node;
			n->data=j;
			for(j/=10;j||p[i]=='0';j/=10,i++);	 //计算前进的位数!!!!!! that is great !!!!!!!!
			if(!head->next) tail=head->next=n;
			else tail->next=n,tail=n;
			tail->next=NULL;
		}
	}
	if(head->next)
	{
		cout<<"整数有：\n";
		for(tail=head->next,delete head;tail;tail=tail->next,delete head)
		{
			cout<<tail->data<<'\t';
			head=tail;
		}
	}
	else cout<<"没有整数";
	delete p;
	return 0;
}
//注意atoi函数的作用：atoi()会扫描参数字符串，检测到第一个数字或正负符号时开始做类型转换
//，之后检测到非数字或结束符\0时停止转换，返回整型数

**************************测试文件f1.txt**************************
hdladf 89ae 00aefadv 90909 0000#

******************************************************************




9-8
#include<iostream>
#include<fstream>
using namespace std;


struct student
{
	char name[20];		//姓名
	int age,num;		//年龄、学号
	float cgrade,egrade;//c++成绩、英语成绩
	student *next;
};

int main()
{
	ifstream in("f11.txt");
	int i=1;float max=0,min=10000,s=0;
	student *head=new student,*smax;student *smin;
//	cout<<"请输入学生信息:\n";
//	cout<<"	姓名	年龄	学号	c++成绩	英语成绩	继续(1)/结束(0)\n";
	do{
		cout<<"	";
		student *n=new student;
		in>>n->name>>n->age>>n->num>>n->cgrade>>n->egrade>>i;
		s=n->cgrade+n->egrade;
		if(s>max) max=s,smax=n;//cout<<smax->name;
		if(s<min) min=s,smin=n;
		if(!head->next) head->next=n,n->next=NULL;
		else 
		{
			n->next=head->next;
			head->next=n;
		}
	}while(i!=0);
	if(smax)
	{
		cout<<"成绩最高的同学是:";
		cout<<smax->name<<"	"<<smax->age<<"	"<<smax->num<<"	"<<smax->cgrade<<"	"<<smax->egrade<<endl;
		cout<<"		";
	}
	if(smin)
	{
		cout<<"成绩最低的同学是:";
		cout<<smin->name<<"	"<<smin->age<<"	"<<smin->num<<"	"<<smin->cgrade<<"	"<<smin->egrade<<endl;
	}
	return 0;
}

**********************测试文件 f11.txt******************************
tw	15	101	100	98	1
tw1	15	102	22	1000	0
********************************************************************


9-9
#include<iostream>
#include<fstream>
using namespace std;


struct student
{
	char name[20];				//姓名
	int age,num;				//年龄、学号
	float cgrade,egrade,sum;	//c++成绩、英语成绩、总成绩
	student *next;
};

void sort(student *q,student *n)		//q指向head  n为临时生成的节点
{
	student *p=q->next;
	for(;p;q=p,p=p->next)
		if(p->sum>n->sum) q->next=n,n->next=p;
	if(!p) q->next=n,n->next=p;
}

void CREAT(student *head)
{
	ifstream in("f11.txt");
	int i=1;float max=0,min=10000;
//	cout<<"请输入学生信息:\n";
//	cout<<"	姓名	年龄	学号	c++成绩	英语成绩	继续(1)/结束(0)\n";
	do{
		cout<<"	";
		student *n=new student;
		in>>n->name>>n->age>>n->num>>n->cgrade>>n->egrade>>i;
		n->sum=n->cgrade+n->egrade;
		sort(head,n);
	}while(i!=0);
}

void show(student *head)
{
	cout<<"姓名	年龄	学号	c++成绩	英语成绩\n";
	for(student *smax=head->next;smax;delete head,head=smax,smax=smax->next)
		cout<<"		"<<smax->name<<"	"<<smax->age<<"	"<<smax->num<<"	"<<smax->cgrade<<"	"<<smax->egrade<<endl;
	delete head;
}
int main()
{
	student *head=new student;
	head->next=NULL;
	CREAT(head);
	show(head);
	return 0;
}
**********************测试文件 f11.txt******************************
tw	15	101	100	98	1
tw1	15	102	22	1000	0
********************************************************************


9-10
#include<iostream>
#include<fstream>
using namespace std;

struct node{
	int num;
	node *next;
};


node* Exchange(node *head,node *tail)	//head、tail分别为原链表的头尾指针
{
	node *p=head,*q=tail;
	for(;q->next!=head;)
	{
		for(p=head;p->next!=q;p=p->next);
		q->next=p;
		q=p;
	}
	head->next=NULL;					//注意标记链表的结尾
	return tail;
}


void Creat(node* (&head),node* (&tail))	//指针的引用
{
	ifstream in("f11.txt");
	int i=1;
	//cout<<"值	继续(1)/结束(0)\n";
	do{
		node *n=new node;
		in>>n->num>>i;
		if(!head) head=tail=n;
		else tail->next=n,tail=n;
	}while(i!=0);
	tail->next=NULL;
}

int main()
{
	node *head=NULL,*tail;
	Creat(head,tail);
	head=Exchange(head,tail);
	cout<<head->num;
	for(node *p=head->next;p;delete head,head=p,p=p->next)
		cout<<" "<<p->num;
	delete head;
	return 0;
}

*********************测试文件 f11.txt***********************
1	1
2	1
3	1
4	1
5	1
6	1
7	1
8	1
9	1
10	0
************************************************************


9-11
#include<iostream>
using namespace std;

struct node 
{
	int data;
	node *next;
};

int H(long int n1,int T)
{
//创建链表
	if(n1<1) {cout<<"人数输入有误！";return -1;}
	int i,j;node *n,*tail,*head,*q;
	head=NULL;
	for(i=1;i<=n1;i++)
	{
		n=new node;
		n->data=i;
		if(!head) tail=head=n;
		else tail->next=n;tail=n;
	} 
	tail->next=head,q=head;
	
//计数查找	
	for(i=1,j=n1;j>1;)//用i循环计数，当i是周期的整数倍时,将其对应的结点数据域置0
	{
		if(q->data!=0) 
		{
			if(i%T==0) q->data=0,j--;
			i++;
		}
		q=q->next;
	}
	for(;q->data==0;q=q->next);
	i=q->data;
//删除链表
	for(tail=q->next,q->next=NULL,q=tail;q;n=q,q=q->next,delete n);//先断开链表，再删除链表。
	return i;
}

int main()
{
	long int n1,T,i;
	do{
		cout<<"请输入总人数和周期：";
	cin>>n1>>T;
	n1=H(n1,T);
	if(n1!=-1) cout<<"最终剩下"<<H(n1,T)<<"号\n\n";
	cout<<"是否继续？是(1)/否(0):";
	cin>>i;
	}while(i!=0);
	return 0;
}

9-12
#include<iostream>
using namespace std;


struct node{
	float zh,xi;
	node *next;
};

void sort(node *h,node *n)		//h为首节点 n为长度
{
	node *p=h;
	if(p->next) 
	{
		node *q=h->next;
		for(;q&&(q->zh<n->zh);p=q,q=q->next);	//假设各表达式都是最简的
		n->next=q,p->next=n;
	}
	else h->next=n,n->next=NULL;
}



void creat(node*h)				//h为首节点，
{
	int i=1;
	cout<<"开始建立多项式链表:\n";
	cout<<"指数	系数	继续(1)/结束(0)\n";
	for(;i;)
	{
		node *n=new node;
		cin>>n->zh>>n->xi>>i;
		sort(h,n);	
	}
}



node* combine(node *h1,node*h2)							//h1 h2分别为两个链表的头指针
{
	node *h3=new node,*p1=h1->next,*p2=h2->next,*p3;	//p3为总链的尾指针
	h3->next=NULL;
	while(p1&&p2)
	{
		if(p1->zh<p2->zh)
		{
			if(!h3->next) p3=h3->next=p1;
			else p3->next=p1,p3=p1;
			p1=p1->next;
		}
		else if(p1->zh>p2->zh)
		{
			if(!h3->next) p3=h3->next=p2;
			else p3->next=p2,p3=p2;
			p2=p2->next;
		}	
		else 
		{
			if(!h3->next) p3=h3->next=p2;
			else p3->next=p2,p3=p2;
			p3->xi=p1->xi+p2->xi;
			p2=p2->next,p1=p1->next;
		}
	}
	if(p1) p3->next=p1;	 
	else if(p2) p3->next=p2;
	return h3;
}



void OUT(node*h)
{
	if(h->next)
	{
		node *p=h->next;
		cout<<"系数"<<"	"<<"指数"<<endl;
		while(p) 
		{cout<<p->xi<<"	"<<p->zh<<endl;p=p->next;}
		
	}
}

void Delete(node *h)
{
	node *p=h->next;
	for(;p;delete h,h=p,p=p->next);
	delete h;
}

int main()
{
	node *h1=new node,*h2=new node,*h3;
	h1->next=h2->next=NULL;
	creat(h1);
	OUT(h1);
	creat(h2);
	OUT(h2);
	h3=combine(h1,h2);
	OUT(h3);
	Delete(h3);
	return 0;
}





9-15
#include<iostream>
using namespace std;

enum Pro{teacher,student};

struct node{
	int id;
	char name[9],sex[3];
    Pro pro;									//enum Pro {教师,学生}pro;char *p,用来放职称或班级，由于是结构体的定义，所以此处不可动态分配内存
	char *p;
	node *next;
};

int main()
{
	node *h1=NULL,*h2=NULL,*n,*t1,*t2;			//h1,h2单链分别存放老师和学生数据
	int a=1,k;
	
	
	//链表的建立
	cout<<"id	姓名	性别	职业(教师(0)/学生(1))	职称	继续(1)/结束(0)\n"; 
	for(;a;)	
	{
		n=new node;
		n->p=new char[10];						//用来放职称或班级.
		cin>>n->id>>n->name>>n->sex>>k>>n->p>>a;
		switch(k)								//老师和学生信息分别存放在两个链表里
		{
		case 0:
			{
				n->pro=teacher;
				if(!h1) t1=h1=n;
				else t1->next=n,t1=n;
			};
			break;
		case 1:
			{
				n->pro=student;
				if(!h2) t2=h2=n;
				else t2->next=n,t2=n;
			};
			break;
		default:cout<<"输入有误";return 1;
		}
	}
	t1->next=t2->next=NULL;						//作为链表结束标志，不可少，其作用会在来拿表输出时体现
	
	
	//链表的输出
	if(h1){
		cout<<"教师有:"<<endl;
		for(n=h1;n;n=n->next) cout<<n->id<<'\t'<<n->name<<'\t'<<n->sex<<'\t'<<n->p<<endl;
	}
	if(h2){
		cout<<"学生有:"<<endl;
		for(n=h2;n;n=n->next) cout<<n->id<<'\t'<<n->name<<'\t'<<n->sex<<'\t'<<n->p<<endl;
	}
	return 0;
}





9-16
#include<iostream>
using namespace std;

enum suit{wintersweet,diamonds,hearts,spade};

struct color{
	char nub[4];				//牌面
	suit c;						//花色
	color *next;
};

int main()
{
	color *h=NULL,*t,*n;
	int k,i=1;
//输入
	cout<<"牌面(3~10或J~A)		请输入花色(w-0,d-1,h-2,s-3)	继续(1)/结束(0)\n";
	for(;i;)
	{
		n=new color;
		cin>>n->nub>>k>>i;		//a的输入判断
		switch(k)
		{
		case 0:n->c=wintersweet;break;
		case 1:n->c=diamonds;break;
		case 2:n->c=hearts;break;
		case 3:n->c=spade;break;
		default:cout<<"输入有误！";return 1;
		}
		if(!h) t=h=n;
		else t->next=n,t=n;
	}
	if(h) t->next=NULL;

//输出	
	for(n=h;n;n=n->next)
	{
		cout<<endl;
		switch(n->c)
		{
		case 0:cout<<"wintersweet";break;
		case 1:cout<<"diamonds";break;
		case 2:cout<<"hearts";break;
		case 3:cout<<"spade";break;
		}
		cout<<'\t'<<n->nub;
	}
	return 0;
}


10-12         
#include<iostream>
using namespace std;

class book{
	char *name;
	int num;			//数量
	float univalence;	//单价
public:
	book(char *s,int a,float b)
	{
		name=new char[strlen(s)+1];
		strcpy(name,s);
		num=a,univalence=b;
	}
	float Sum(){return num*univalence;}
	void Output()
	{
		cout<<"书名		数量		单价		总计\n";
		cout<<name<<'\t\t'<<num<<'\t'<<univalence<<'\t'<<Sum();
	}
};
int main()
{
	char *s=new char;int a;float b;
	cout<<"请分别输入书名及其数量和单价:";
	cin>>s>>a>>b;
	book c1(s,a,b);
	c1.Output();
	return 0;
	
}

10-13
#include<iostream>
using namespace std;

class Rect{
	float left,right,top,bottom;
public:
	float square(){return (top-bottom)*(right-left);}
	float perimeter(){return 2*(right+top-left-bottom);}
	void Input()
	{
		cout<<"请分别输入l,r,t,b:";
		cin>>left>>right>>top>>bottom;
		if(right<left||top<bottom) {cout<<"输入有误!";return;}
	}
	void Output()
	{
		cout<<"矩形面积为："<<square()<<endl;
		cout<<"周长为："<<perimeter();
	}
};
int main()
{
	int n;
	cout<<"请输入数组大小：";cin>>n;
	Rect *c1=new Rect[n];
	for(int i=0;i<n;i++)
	{
		c1[i].Input();
		c1[i].Output();
		cout<<endl;
	}
	delete c1;
	return 0;
}


10-14

#include<iostream>
#include<cmath>
using namespace std;

class point{
	float x,y;
public:
	point(float x,float y){this->x=x,this->y=y;}
	float distance(point t1) {return sqrt((x-t1.x)*(x-t1.x)+(y-t1.y)*(y-t1.y));}
	friend float Distance(point&,point&);
};

float Distance(point& p1,point& p2)
{return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));}


int main()
{
	int x,y,x1,y1;
	cout<<"分别输入两点坐标：";
	cin>>x>>y>>x1>>y1;
	point p1(x,y),p2(x1,y1);
	cout<<"距离为："<<p1.distance(p2)<<'\n'
		<<Distance(p1,p2)<<endl;
	return 0;
}



10-15
#include<iostream>
using namespace std;

class CDate{
	int year,month,day;
public:
	CDate(int y=0,int m=0,int d=0)	//检错和重新输入功能
	{
		year=y,month=m,day=d;
	}
	friend class humaninfo;
};

class humaninfo{
	char id[20];
	char name[20];
	char sex[10];
	CDate birthday;
public:
	humaninfo()
	{
		cout<<"ID			NAME	SEX	BIRTHDAY(YEAR  MONTH   DAY)\n";
		cin>>id>>name>>sex>>birthday.year>>birthday.month>>birthday.day;
	}

	void show()
	{cout<<id<<'\t'<<name<<'\t'<<sex<<'\t'<<birthday.year<<" "<<birthday.month<<" "<<birthday.day;}
};


int main()
{
	humaninfo me;
	me.show();
	return 0;
}







10-16
#include<iostream>
#include<cmath>
using namespace std;

class String{
	char *ptr;
	int len;
public:
	String(char *s=NULL)		//构造函数
	{
		if(s)
		{
			len=strlen(s);
			ptr=new char[len+1];
			strcpy(ptr,s);
		}
		else ptr=NULL;
	}
	
	String(String &t)			//复制构造函数
	{
		if(this==&t) return;	//避免对象自我复制
		if(t.ptr)
		{						//if(ptr) delete ptr;
			len=strlen(t.ptr),ptr=new char[len+1],strcpy(ptr,t.ptr);
		}
		else ptr=NULL;
	}
	
	bool isIn(char c1)
	{
		for(int i=0;i<len&&ptr[i++]!=c1;); 
		if(ptr[i]) 
		{
			cout<<"该字符在字符串第"<<i<<"位"<<ptr[i-1];
			return 1;
		}
		cout<<"该字符串中没有字符:"<<c1;
		return 0;
	}
	
	void Print(){if(ptr) cout<<ptr<<'\n';}
	~String(){delete ptr;}
};


int main()
{
	char *s=new char[100],obj;
	cout<<"请输入字符串：";cin>>s;
	String a(s);	//测试构造函数
	a.Print();		//测试输出
	cout<<"请输入需要查找的字符:";cin>>obj;
	a.isIn(obj);	//测试查找  'a'是测试字符可随意更换；
	cout<<endl;
	String b(a);	//测试复制构造函数
	b.Print();		//输出
	delete s;
	return 0;
}






10-17
#include<iostream>
#include<cmath>
using namespace std;

class CArray{
	int size;
	int *p;
public:

//构造函数
	CArray(int n=100)
	{p=new int[n],size=n;}	
	
//析构函数
	~CArray(){delete p;}	
	
//取或设置数组中的第i个元素
	int& GetElem(int i)
	{return p[i-1];}		
	
//输入数组元素
	void Input()			
	{
		cout<<"请输入数组中元素:";
		for(int i=0;i<size;cin>>p[i++]);
	}

//输出
	void Print() 
	{
		for(int i=0;i<size;cout<<p[i++]<<'\t');
		cout<<endl;
	}

//给数组中元素排序	
	void Sort()				
	{
		int i,j,k,t;
		for(i=0;i<size-1;i++)
		{
			for(j=i+1,k=i;j<size;j++)
				if(p[k]>p[j]) k=j;
				if(k!=i) t=p[i],p[i]=p[k],p[k]=t;
		}	  
	   }
	
	int Search(int m)//在数组中查找某个元素
	{
		for(int i=0;i<size;i++) if(p[i]==m) return i;
		return -1;
	}
};

int main()
{
	int n,m;
	cout<<"请输入数组大小和需查找的元素:",cin>>n>>m;
	CArray a(n);
	a.Input();
	a.Print();
	a.Sort();
	a.Print();
	if(a.Search(m)!=-1) cout<<"该数是排序后数组中的第"<<a.Search(m)+1<<"个元素!";
	else cout<<"该数不是数组中的元素!";
	return 0;
}


10-18
#include<iostream>
#include<cstring>
using namespace std;


class Cword{
	char **words;
public:
	Cword()
	{
		words=new char*[10];
		cout<<"请输入字符串:";
		for(int i=0;i<10;)
		{
			words[i]=new char[100];
			cin>>words[i++];
		}
	}
	~Cword()
	{
		for(int i=0;i<10;delete words[i++]);
		delete words;
	}
	void lookup(char *s)			//考虑模式匹配算法
	{
		for(int i=0,j=0;i<10;i++)
			if(strstr(words[i],s)) cout<<words[i]<<endl,j++;
		if(j) cout<<"与目标串匹配的字符串有"<<j<<"个!";
		else cout<<"没有与目标串匹配的字符串!";
	}
};

int main()
{
	Cword mv;
	char s[100];
	cout<<"请输入目标字符串:";cin>>s;
	mv.lookup(s);
	return 0;
}










11-7
#include<iostream>
using namespace std;

class Complex{
	float real;
	float image;
public:
	Complex(float f=0,float i=0)
	{real=f,image=i;}
	
	Complex operator +(Complex t)
	{return Complex(real+t.real,image+t.image);}
	
	Complex operator -(Complex t)
	{return Complex(real-t.real,image-t.image);}
	
	Complex operator *(Complex t)
	{return Complex(real*t.real-image*t.image,real*t.image+image*t.real);}
	
	
	Complex operator /(Complex t)
	{
		if(t.real||t.image)
		{
			float i;
			i=t.real*t.real+t.image*t.image;
			return Complex((real*t.real+image*t.image)/i,(image*t.real-real*t.image)/i);
		}
		else 
		{cout<<"除数不能为0!";exit(2);}
	}
	
	bool operator ==(Complex t)
	{
		if(real==t.real&&image==t.image)  return 1;
		else return 0;
	}
	
	bool operator !=(Complex t)
	{
		if(real==t.real&&image==t.image)  return 0;
		else return 1;
	}
	
	Complex& operator +=(Complex t)
	{
		real+=t.real,image+=t.image;
		return * this;
	}
	
	Complex& operator -=(Complex t)
	{
		real-=t.real,image-=t.image;
		return * this;
	}
	
	void show()
	{
		if(real||image)
		{
			if(real) cout<<real;
			if(image>0) cout<<'+';
			if(image) cout<<image<<'i';
		}
		else cout<<0;
		cout<<endl;
	}
	
};

int main()
{
	Complex	a(2,3),b(1,4),c;
	a.show();
	b.show();
	c.show();
	c=a+b;c.show();
	c=a-b;c.show();
	c=a*b;c.show();
	c=a/b;c.show();
	if(c==c) cout<<"==验证成功!\n";
	if(c!=a) cout<<"!=验证成功!\n";
	a+=b;a.show();
	a-=b;a.show();
	return 0;
}






11-8
#include<iostream>
using namespace std;

class point{
	float x,y;
 public:
	 point(float a=0,float b=0){x=a,y=b;}//注意赋缺省值
	 
	 point operator +(point& c1)
	 {return point(x+c1.x,y+c1.y);}//产生临时对象

	 point operator -(point& c1)
	 {return point(x-c1.x,y-c1.y);}
	 
	 point operator ++()
	 {
		 x++,y++;
	     return *this;
	 }

	 point operator ++(int)
	 {
		 point t=*this;
	     x++,y++;
	     return t;
	 }

	
	 point& operator --()
	 {
		 x--,y--;
		 return *this;
	 }

	 point operator --(int)
	 {
		 point t=*this;
		 x--,y--;
		 return t;
	 }
	 
	 void show()
	 {cout<<"x="<<x<<","<<"y="<<y<<'\t';}
};

int main()
{
	point p1,p2;
	cout<<"p2	p	p1\n";
	p2.show();
    point p(3,4);p.show();
    p1++,p1.show();
	cout<<endl;
    p2=++p + p1++;p2.show(),p.show(),p1.show();
	cout<<endl;
    p2=--p - p1--;p2.show(),p.show(),p1.show();
    return 0;
}




11-9
#include<iostream>
using namespace std;

class point{
	float x,y;
 public:
	 point(float a=0,float b=0){x=a,y=b;}
     void show()
	 {cout<<"x="<<x<<","<<"y="<<y<<endl;}
     friend class Rectangle;
};


class Rectangle{
	point left,right;
  public:
	  Rectangle(float a,float b,float c,float d):left(a,b),right(c,d){};
	  float S() {return (right.x-left.x)*(left.y-right.y);}
	 
	  int operator >(Rectangle& c1)
	  {return S()>c1.S();}
      
	  int operator <(Rectangle& c1)
	  {return S()<c1.S();}
	  void show(){cout<<(right.x-left.x)*(left.y-right.y)<<endl;}

};

int main()
{
	float a,b,c,d;
    cout<<"请依次输入第一个矩形左右两点坐标:";cin>>a>>b>>c>>d;
    if(a>c||b<d) {cout<<"输入有误!请重新输入!";return 1;}
	Rectangle b1(a,b,c,d);cout<<b1.S()<<endl;
	cout<<"请依次输入第二个矩形左右两点坐标:";cin>>a>>b>>c>>d;
    if(a>c||b<d) {cout<<"输入有误!请重新输入!";return 2;}
	Rectangle c1(a,b,c,d);cout<<c1.S()<<endl;
	if(b1>c1) {cout<<"第一个矩形面积大于第二个矩形!";return 1;}
    if(b1<c1) {cout<<"第一个矩形面积小于第二个矩形!";return 2;}
	cout<<"两个矩形面积一样大！";
	return 0;

}






11-10
#include<iostream>
#include<cstring>
using namespace std;

class String{
	char *Str;
public:
	String(String& s)
	{
		if(s.Str)
		{
			Str=new char[strlen(s.Str)+1];
			strcpy(Str,s.Str);
			
		}else Str=NULL;
		
	}
	
	String(char *s=NULL)
	{
		if(s)
		{
			Str=new char[strlen(s)+1];
			strcpy(Str,s);
			
		}else Str=NULL;
		
	}
    
	~String(){delete Str;}
	
	void Show(){if(Str) cout<<Str<<'\n';}
	
    operator char*()
	{return Str;}
	
	String& operator =(String &c1)
	{
		if(c1.Str)
		{
			char* t=new char[strlen(c1.Str)+1];
			strcpy(t,c1.Str); 
			if(Str) delete Str;		//Str已经初始化（动态分配了内存）
            Str=t;	
		}else Str=NULL;	 
		
		return *this;	
	}
	
	String& operator +=(const char *c1)
	{
		char *t;
		if(Str)
		{
			t=new char[strlen(c1)+strlen(Str)+1];
			strcpy(t,Str);
			delete Str;
		}
		else t=new char[strlen(c1)+1];
		strcat(t,c1);
		Str=t;
		return *this;
		
	}
	
	String& operator -=(char *c1)
	{
		char *t,*s;
		if(t=strstr(Str,c1))
		{
			s=new char[strlen(Str)-strlen(t)+1];
			*t='\0';
			strcpy(s,Str);
			t+=strlen(c1);
			strcat(s,t);
			delete Str;
			Str=s;
			
		}
		else cout<<"不存在该子串!\n";
		return *this;
		
	}
	
	int operator==(char *c1)
	{return strcmp(Str,c1)==0;}
	
	
	int operator!=(char *c1)
	{return strcmp(Str,c1)!=0;}
	
	
};

int main()
{
	char s[100];
    cout<<"请输入第一个字符串:";cin>>s;
	String b1(s);
	cout<<"请输入第二个字符串:";cin>>s;
	String c1(s);
    b1+=c1;b1.Show();
    b1-=c1;b1.Show();
    if(b1==c1) cout<<"两个字符串相同!"<<endl;
    if(b1!=c1) cout<<"两个字符串不相同!"<<endl;
    b1=c1;b1.Show();
	
	return 0;
	
}







11-11
#include<iostream>
using namespace std;

class Fraction{
	int numerator;					//分子
	int denominator;				//分母
public:
	int LCM(int DENOM1,int DENOM2)				//求最大公约数
	{
		int i,j;								//i,j分别为除数和被除数
		if(DENOM1&&DENOM2)
		{
			if(DENOM1<DENOM2) i=DENOM1,j=DENOM2;
			else i=DENOM2,j=DENOM1;
			for(int k=j%i;k;j=i,i=k,k=j%i);		//辗转相除法求最大公约数（为最终的i）
			return i;
		}
		else return 1;
	}	
	

	//化简函数
	void Simplify(int& m,int& n)	
	{
		int i=LCM(m,n);
		m/=i,n/=i;
	}
	
	
	//构造函数
	Fraction(int f=0,int i=1)
	{
		if(i)
		{	
			Simplify(f,i);
			denominator=i;
			numerator=f;	
		}
		else {cout<<"分母不能为0!";exit(2);}
	}
	
	

	//取正运算
	Fraction& operator +()				
	{
		if(numerator<0) numerator*=(-1);
		if(denominator<0) denominator*=(-1);
		return *this;
	}
	




	//加法运算
	Fraction operator +(Fraction t)			
	{
		int D,N;							//D,N分别存放分母和分子
		if(denominator==t.denominator) 
		{
			N=numerator+t.numerator;
			D=denominator;
		}
		else 
		{
			D=LCM(denominator,t.denominator);
			D=denominator*(t.denominator/D);//求得最小公倍数i
			N=D/denominator*numerator+D/t.denominator*t.numerator;
		}
		Simplify(N,D);
		return Fraction(N,D);		
		
	}

	


	//取负运算
	Fraction& operator -()					
	{
		numerator*=(-1);
		denominator*=(-1);
		return *this;
	}
	



	//减法运算
	Fraction operator -(Fraction t)			
	{
		int D,N;							//D,N分别存放分母和分子
		if(denominator==t.denominator) 
		{
			N=numerator-t.numerator;
			D=denominator;
		}
		else 
		{
			D=LCM(denominator,t.denominator);
			D=denominator*(t.denominator/D);//求得最小公倍数i
			N=D/denominator*numerator-D/t.denominator*t.numerator;
		}
		Simplify(N,D);
		return Fraction(N,D);		
		
	}
	
	//乘法运算
	Fraction operator *(Fraction t)
	{
		int N,D;
		N=t.numerator*numerator;
		D=t.denominator*denominator;
		Simplify(N,D);
		return Fraction(N,D);
	}
	

	//除法运算
	Fraction operator /(Fraction t)
	{
		int N,D;
		N=t.denominator*numerator;
		D=t.numerator*denominator;
		if(D==0)  {cout<<"分母不能为0!";exit(1);} 
		Simplify(N,D);
		return Fraction(N,D);
	}
	

	//判等运算
	bool operator ==(Fraction t)
	{
		if(numerator==t.numerator&&denominator==t.denominator)  return 1;
		else return 0;
	}
	

	bool operator !=(Fraction t)
	{
		if(numerator==t.numerator&&denominator==t.denominator)  return 0;
		else return 1;
	}
	
	bool operator >(Fraction t)
	{
		float i,j;
		i=t.numerator/t.denominator;
		j=numerator/denominator;
		if(i>j) return 1;
		else return 0;
	}
	
	bool operator >=(Fraction t)
	{
		float i,j;
		i=t.numerator/t.denominator;
		j=numerator/denominator;
		if(i>=j) return 1;		
		else return 0;
	}
	
	bool operator <(Fraction t)
	{
		float i,j;
		i=t.numerator/t.denominator;
		j=numerator/denominator;
		if(i<j) return 1;
		else return 0;
	}
	
	
	bool operator <=(Fraction t)
	{
		float i,j;
		i=t.numerator/t.denominator;
		j=numerator/denominator;
		if(i<=j) return 1;			
		else return 0;
	}
	
	
	Fraction& operator +=(Fraction t)
	{
		*this=*this+t;			//因为数据成员中不含指针，故调用默认复制构造函数
		return * this;
	}
	
	Fraction& operator -=(Fraction t)
	{
		*this=*this-t;
		return * this;
	}
	
	operator double()
	{return ((double)numerator/denominator);}
	
	
	void show()
	{
		if(numerator)
		{cout<<numerator<<"/"<<denominator;}
		else cout<<0;
		cout<<endl;
	}
	
};

int main()
{
	Fraction a(4,6),b(1,4),c;
	a.show();
	b.show();
	c.show();
	c=a+b;c.show();
	c=a-b;c.show();
	c=a*b;c.show();
	c=a/b;c.show();
	if(c<a) cout<<"<验证成功!\n";
	else cout<<"<验证不成功!\n";
	if(c>a) cout<<">验证成功!\n";
	else cout<<">验证不成功!\n";
	if(c<=a) cout<<"<=验证成功!\n";
	else cout<<"<=验证不成功!\n";
	if(c>=a) cout<<">=验证成功!\n";
	else cout<<">=验证不成功!\n";
	if(c==c) cout<<"==验证成功!\n";
	if(c!=a) cout<<"!=验证成功!\n";
	else cout<<"!=验证不成功!\n";
	a+=b;a.show();
	a-=b;a.show();
	return 0;
}







11-12
#include<iostream>
using namespace std;

class Matrix{
	int m,n;	//m表示列 n表示行
	float **p;	//p存放动态实型数组的数据 
public:

//创建二维数组	
	void Creat()
	{
		if(p) Delete();				//本题中该判断显得多余，因为该函数只在两个构造函数中使,
									//但当操作过程中需要Creat()时，它可以及时delete
		p=new float*[m];
		if(!p){cout<<"未申请到动态内存!";return;}
		for(int i=0;i<m;i++)
		{  
			p[i]=new float[n];
			if(!p[i]){cout<<"未申请到动态内存!";return;}     
		}
	}
	


//构造函数
	Matrix(int a,int b)
	{
		p=NULL;
		m=a,n=b;
		Creat();
	}
	
	
	void Input()
	{
		int i,j;
		for(i=0;i<m;i++)
		{
			cout<<"请输入第"<<i+1<<"行数据:";
			for(j=0;j<n;cin>>p[i][j++]);			
		}
		
	}
//释放二维数组内存
	void Delete()
	{
		for(int i=0;i<m;delete p[i++]);
		delete p;
	}
	
	
	
//复制构造函数(每个数据元素都要复制!!!,对于指针元素要注意,不能通过简单的赋值来复制)
	
	Matrix(Matrix& c1)
	{ 					 
		p=NULL;			//Creat()中需要判断
		m=c1.m,n=c1.n;
		Creat();
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				p[i][j]=c1.p[i][j];			
	}
	
    
	
	
	   
	Matrix operator +(Matrix& c1)
	{
		Matrix t(m,n);
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				t.p[i][j]=p[i][j]+c1.p[i][j];
			return t;
			
	}

	
	Matrix operator -(Matrix& c1)
	{
		Matrix t(m,n);
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				t.p[i][j]=p[i][j]-c1.p[i][j];
			return t;
			
	}
	
	Matrix& operator =(Matrix& c1)
	{
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				p[i][j]=c1.p[i][j];
			return *this;
			
	}
	
	Show()
	   {
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
			{
				cout<<p[i][j];
				if((j+1)%n) cout<<'\t';
				else cout<<endl;	  
			}
			
		}
	
	~Matrix(){Delete();}
};
int main()
{
	int m,n; 
    cout<<"请依次输入矩阵的行数和列数：";
	cin>>m>>n;
    Matrix b1(m,n);b1.Input();b1.Show();
    Matrix c1(m,n);c1.Input();c1.Show();
	cout<<endl;
    Matrix d1(m,n);
	d1=b1+c1;d1.Show();cout<<endl;
	d1=b1-c1;d1.Show();cout<<endl;
    b1=c1;b1.Show();
	
	return 0;
	
}





11-13
#include<iostream>
using namespace std;


struct node{
	float zh,xi;
	node *next;
};



class Multinomial{
	node *head;											//多项式链表头节点
public:
//构造函数
	Multinomial()
	{head=new node;head->next=NULL;}



//复制构造函数
	Multinmial(Multinomial& t)
	{
		head=new node;head->next=NULL;			
		for(node *n,*p=t.head->next;p;p=p->next)
		{
			n=new node;
			n->zh=p->zh;
			n->xi=p->xi;
			sort(n);
		}
	}


//释放某个多项式链表的空间（单独提取出来是因为中途操作需要delete）
	void Delete()
	{
		for(node*p=head->next;p;delete head,head=p,p=p->next);
		delete head;
	}

	
//析构函数
	~Multinomial()
	{Delete();}


//节点复制函数
	void Copy(node*a,node *b)							//复制一个节点信息
	{
		a->zh=b->zh;
		a->xi=b->xi;
	}


//链表段复制函数
	void Copynode(node *a,node *b)						//复制某一段链表
	{
		for(node *n,*p=b;p;p=p->next)
		{
			n=new node;
			n->zh=p->zh;
			n->xi=p->xi;
			a->next=n;
			a=n;
		}
		a->next=NULL;
	}


//插入排序函数
	void sort(node *n)		
	{
		node *p=head;
		if(p->next) 
		{
			node *q=head->next;
			for(;q&&(q->zh<n->zh);p=q,q=q->next);	
			if(q&&q->zh==n->zh) q->xi+=n->xi,delete n;				//!!!合并同类项!!!
			else n->next=q,p->next=n;
		}
		else head->next=n,n->next=NULL;
	}
	
	
//创建多项式链表	
	void creat()				
	{
		int i=1;
		cout<<"开始建立多项式链表:\n";
		cout<<"指数	系数	继续(1)/结束(0)\n";
		for(;i;)
		{
			node *n=new node;
			cin>>n->zh>>n->xi>>i;
			sort(n);	
		}
	}

	

//复制运算符重载	
	Multinomial& operator =(Multinomial& t)
	{
		if(head->next) Delete();
		head=new node;head->next=NULL;								//先清空原多项式链
		for(node *n,*p=t.head->next;p;p=p->next)
		{
			n=new node;
			n->zh=p->zh;
			n->xi=p->xi;
			sort(n);
		}
		return *this;
	}


//加法运算符重载（!!!本质是链表的合并!!!）
	Multinomial operator +(Multinomial& t)							//head t.head分别为两个链表的头指针
	{
		Multinomial t1;
		node *(&h3)=t1.head,*p1=head->next,*p2=t.head->next,*p3,*n;	//p3为总链的尾指针
		while(p1&&p2)
		{
			n=new node;
			if(p1->zh<p2->zh)
			{
				cout<<5;
				Copy(n,p1);
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p1=p1->next;
			}
			else if(p1->zh>p2->zh)
			{
				Copy(n,p2);
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p2=p2->next;
			}	
			else 
			{		
				Copy(n,p2);
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p3->xi=p1->xi+p2->xi;
				p2=p2->next,p1=p1->next;
			}
		}
		if(p1) Copynode(p3,p1);	 
		else if(p2) Copynode(p3,p2);
		else p3->next=NULL;
		return t1;
	}
	


//+=运算符重载
	Multinomial& operator +=(Multinomial& t)
	{
		*this=*this+t;
		return *this;
	}

	


//减号运算符重载	
	Multinomial operator -(Multinomial& t)							//head	  t.head分别为两个链表的头指针
	{
		Multinomial t1;
		node *(&h3)=t1.head,*p1=head->next,*p2=t.head->next,*p3,*n;	//p3为总链的尾指针
		while(p1&&p2)
		{
			n=new node;
			if(p1->zh<p2->zh)
			{
				Copy(n,p1);
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p1=p1->next;
			}
			else if(p1->zh>p2->zh)
			{
				Copy(n,p2);
				(n->xi)*=-1;
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p2=p2->next;
			}	
			else 
			{
				Copy(n,p2);
				if(!h3->next) p3=h3->next=n;
				else p3->next=n,p3=n;
				p3->xi=p1->xi-p2->xi;
				p2=p2->next,p1=p1->next;
			}
		}
		if(p1) Copynode(p3,p1);	 
		else if(p2) Copynode(p3,p2);
		else p3->next=NULL;
		return t1;
	}
	


//-=运算符重载
	Multinomial& operator -=(Multinomial& t)
	{
		*this=*this-t;
		return *this;
	}



//乘号运算符重载
	Multinomial operator *(Multinomial& t)						//head   t.head分别为两个链表的头指针
	{
		Multinomial t1;
		node*p1=head->next,*p2,*n;								//p3为总链的尾指针
		for(;p1;p1=p1->next)
		{
			for(p2=t.head->next;p2;p2=p2->next)					//!!!!出错：每次进入内循环p2要刷新
			{
				n=new node;
				n->xi=p1->xi*p2->xi;
				n->zh=p1->zh+p2->zh;
				t1.sort(n);
			}
		}
		return t1;
	}


//*=运算符重载
	Multinomial operator *=(Multinomial& t)
	{
		*this=*this*t;
		return *this;
	}



//输出函数
	void OUT()
	{
		if(head->next)
		{
			node *p=head->next;
			cout<<"系数"<<"	"<<"指数"<<endl;
			while(p) 
			{cout<<p->xi<<"	"<<p->zh<<endl;p=p->next;}
			
		}
	}
	
	
};

int main()
{
	Multinomial a,b,c;
	a.creat();a.OUT();
	b.creat();b.OUT();
	c=a;c.OUT();
	c=a*b;c.OUT();
	c*=a;c.OUT();
	c=a+b;c.OUT();
	c=a-b;c.OUT();
	c*=a;c.OUT();
	return 0;
}







12-6
#include<iostream>
#include<cmath>
using namespace std;

class point{
  protected:  //因为在派生类中药直接用，所以声明成保护成员而非私有成员；
	  float x,y;
  public:
	  point(float a=0,float b=0){x=a,y=b;}
      void show(){cout<<"x="<<x<<','<<"y="<<y<<endl;}
};

class line:public point{
	float x1,y1;
  public:
	  line(float a,float b,float c,float d):point(a,b){x1=c,y1=d;}
	  float length(){return sqrt((x1-x)*(x1-x)+(y-y1)*(y-y1));}
};

int main()
{
	float a,b,c,d;
    cout<<"请输入首尾两点坐标：";cin>>a>>b>>c>>d;
    line m(a,b,c,d);
    cout<<"长度为:"<<m.length();
    return 0;


}




12-7
#include<iostream>
#include<cmath>
using namespace std;

class point{
  protected:
	 float x,y; 
  public:
	  //float x,y;  L1
	  point(float a=0,float b=0){x=a,y=b;}
      void show(){cout<<"x="<<x<<','<<"y="<<y<<endl;}
     // float Getx(){return x;}   L2
	  //float Gety(){return y;}
      friend class line;// L3

};

class line:public point{
	point n;
  public:
	  line(float a,float b,float c,float d):point(a,b){n.x=c,n.y=d;}//n(c,d)此处不可用
	  float length(){return sqrt((n.x-x)*(n.x-x)+(y-n.y)*(y-n.y));}

};


int main()
{
	float a,b,c,d;
    cout<<"请输入首尾两点坐标：";cin>>a>>b>>c>>d;
    line m(a,b,c,d);
    cout<<"长度为:"<<m.length();
    return 0;

}
//L1 L2 L3均可实现在line中使用n.x,n.y;



(2)
#include<iostream>
#include<cmath>
using namespace std;

class point{
	 float x,y; 
  public:
	  point(float a=0,float b=0){x=a,y=b;}
      void show(){cout<<"x="<<x<<','<<"y="<<y<<endl;}
      friend class line;
};



class line{
    point n,p;
  public:
	  line(float a,float b,float c,float d){n.x=a,n.y=b,p.x=c,p.y=d;}//{n.x=c,n.y=d;}//n(c,d)此处不可用
	  float length(){return sqrt((n.x-p.x)*(n.x-p.x)+(p.y-n.y)*(p.y-n.y));}
};



int main()
{
	float a,b,c,d;
    cout<<"请输入首尾两点坐标：";cin>>a>>b>>c>>d;
    line m(a,b,c,d);
    cout<<"长度为:"<<m.length();
    return 0;

}
//L1 L2 L3均可实现在line中使用n.x,n.y;






12-8
#include<iostream>
#include<cstring>
using namespace std;


class person{
protected:
	char*Name;
	int Age;
	int Sex;		//男--1，女--0
public:
	person(char*name=NULL,int age=0,char *sex=NULL)
	{	
		Name=new char[strlen(name)+1];
		strcpy(Name,name);
		Age=age;
		if(strcmp("男",sex)==0) Sex=1;else Sex=0;
	}


	~person(){if(Name) delete Name;}
		
	
	void Setname(char *name)
	{
		if(Name) delete Name;
		Name=new char[strlen(name)+1];
		strcpy(Name,name);
	}

	virtual void show()
	{
		cout<<"姓名:"<<Name<<"\t年龄"<<Age<<"\t性别"<<((Sex==1)?"男":"女")<<endl;
	}

	void Setage(int age){Age=age;}

	void Setsex(char *sex){if(strcmp("男",sex)==0) Sex=1;else Sex=0;}

	int Getage(){return Age;}

	char* Getsex(){return ((Sex==1)?"男":"女");}
};


class Teacher:public person{
	char pro[30];
	char proname[20];
	int id;
public:
	Teacher(char *Pro=NULL,char *pron=NULL,int i=0,char *name=NULL,int age=0,char *sex=NULL):person(name,age,sex)
	{
		strcpy(pro,Pro);
		strcpy(proname,pron);
		id=i;
	}

	void show()
	{
			cout<<"姓名:"<<"\t年龄"<<"\t性别"<<"\t专业"<<"\t职称"<<"\t职工号"<<endl;
			cout<<Name<<'\t'<<Age<<'\t'<<((Sex==1)?"男":"女")<<'\t'<<pro<<'\t'<<proname<<'\t'<<id<<endl;
	}
	char* GetPRo() {return pro;}

	char* GetPron() {return proname;}

	int Getid() {return id;}

	void Setpro(char *Pro) {strcpy(pro,Pro);}

	void Setpron(char *Pron) {strcpy(proname,Pron);}

	void Setid(int i) {id=i;}
};
	int main()
	{
		Teacher tw("计算机","教授",92,"tw",32,"男");
		cout<<tw.Getage()<<tw.Getid()<<tw.Getsex()<<tw.GetPron()<<endl;
		tw.show();
		return 0;
	}







12-9
#include<iostream>
#include<cstring>
using namespace std;

//person 要定义为虚基类,其中相关函数要定义为虚函数
class postgraduate:public Teacher:public Student{						
	person *p;
public:
	postgraduate(char *pn,.....)		//pn表示职称//由于继承的原因，student和teacher的所有数据和函数成员都可以直接在类中调用
	{
		if(strcmp(pn,"老师")) p=new Teacher,p(...);
		 else p=new Student,p(...);
	}

	~postgraduate(){if(p) delete p;}

};









12-10
#include<iostream>
#include<cstring>
using namespace std;

class unspotted_dog{
protected:				//派生类中show()函数对基类数据有此要求
    char * breed, *color;	
    float height,weight;
public:
	unspotted_dog(char *b=NULL,float h=0,float w=0,char *c=NULL)
	{
		height=h,weight=w;
		if(b) breed=new char[strlen(b)+1],strcpy(breed,b);
		else breed=NULL;
		if(c) color=new char[strlen(c)+1],strcpy(color,c);
		else color=NULL;
	}  
	
	 ~unspotted_dog()
	{
		if(breed) delete breed;
		if(color) delete color;
		cout<<"~a";
	}//定义虚析构函数
	
	void show_breed(){if(breed) cout<<breed<<'\t';}
	
	virtual void show_info()
	{
		cout<<height<<'\t'<<weight<<'\t';
		if(color) cout<<color<<endl;
	}
};


class spotted_dog:public unspotted_dog{
	char *spotcolor;
public:
	spotted_dog(char *b=NULL,float h=0,float w=0,char *c=NULL,char *sc=NULL):unspotted_dog(b,h,w,c)
	{if(sc) spotcolor=new char[strlen(sc)+1],strcpy(spotcolor,sc);}
	
	void show_info()
	{
		cout<<height<<'\t'<<weight<<'\t';
		if(color) cout<<color<<'\t';
		if(spotcolor) cout<<spotcolor<<endl;
	}//虚函数
	
	~ spotted_dog(){if(spotcolor)  delete spotcolor;cout<<"~b";}//虚函数
	
};

int main()
{
	spotted_dog redSpot("Dalmatian",24,60,"white","red");
    unspotted_dog rover("Labrador Retriever",30,40,"yellow");
    redSpot.show_breed();
    redSpot.show_info();
    rover.show_breed();
    return 0;
	
}




12-11
#include<iostream>
#include<cstdlib>
using namespace std;

class Array{	
protected:
	int Size;
	int * Arr;	
public:
	Array(int sz=100)
	{
		Size=sz;
		Arr=new int[Size];
	}
	~ Array(){if(Arr) delete Arr;}
	virtual int& operator [](int i)
	{ 
		if(i<0||i>Size-1) {cout<<"访问越界!";exit(2);}
		return Arr[i];
	}
};

class Array1:public Array{
	int m,n;//m,n分别代表下标的上下界	
public:
	Array1(int sz=100,int a=100,int b=1):Array(sz)//a,b分别对应上下限
	{
		if(a<b||a>=Size||b<0) {cout<<"输入有误!";exit(2);}
		m=a,n=b;
	}
	int* GetArr(){return Arr;}
	void Input()
	{for(int i=0;i<Size;Arr[i++]=i);}
	int& operator [](int i)
	{
		if(i<n||i>m) {cout<<"下标"<<i<<"越界!";exit(2);}
		return Arr[i]; 
	}
};

int main()
{
	int se,m,n;
	cout<<"请输入数组大小和下标上下界:";
	cin>>se>>m>>n;
	Array1 a(se,m,n);
	a.Input();
	//cout<<"输入数组中的数据:";
	//for(int i=0,*p=a.GetArr();i<se;cin>>*p++,i++); 
	cout<<a[600]<<endl;cout<<(a[2]=3);//此处括号不能省。
    return 0;
}







12-12
#include<iostream>
#include<cmath>
using namespace std;

class T{
	
protected:
	float a,b;
public:
	T(float m,float n){a=m;b=n;}
	
	virtual float f(float x) =0;//纯虚函数
	
	float Answer()//弦截法求一元n次方程
	{
		float x,x1=a,x2=b;
		if(f(x1)*f(x2)<0)
		{
			x=(x1*f(x2)-x2*f(x1))/(f(x2)-f(x1));
		for(;fabs(f(x))>=1.0E-6;)
		{
			if(f(x)*f(x1)>0) x1=x;
			else if(f(x)*f(x2)>0) x2=x;
			else return x;
			x=(x1*f(x2)-x2*f(x1))/(f(x2)-f(x1));
		}
		return x;
		}
		else if(f(x1)==0) return x1;
		else if(f(x2)==0) return x2;
		else {cout<<"没有解!"<<endl;exit(2);}
	}
	
	void show()
	{cout<<"该方程在["<<a<<','<<b<<"]上的解为：x="<<Answer();}
};

class Tf:public T{
	float f(float x){return x*x*x-5*x*x+16*x-80;}
	
public:
	Tf(float a,float b):T(a,b){};
};


int main()
{
	T *p=new Tf(4.5,5.5);
	p->show();
	delete p;
	return 0;
}




(2)
//用函数指针做
#include<iostream>
#include<cmath>
using namespace std;

class T{

protected:
	float a,b;//a,b为区间上下限。
    float (*f)(float x);
public:
	T(float m=0,float n=0,float (*c)(float)=NULL ){a=m;b=n;f=c;}

	float Answer()//弦截法求一元n次方程
	{float x,x1=a,x2=b;
	 x=(x1*f(x2)-x2*f(x1))/(f(x2)-f(x1));
	 for(;fabs(f(x))>=1.0E-6;)
	 {if(f(x)*f(x1)>0) x1=x;
	  else if(f(x)*f(x2)>0) x2=x;
	  else return x;
      x=(x1*f(x2)-x2*f(x1))/(f(x2)-f(x1));
	 }
	  return x;
	}
	
	void show()
	{cout<<"该方程在["<<a<<','<<b<<"]上的解为：x="<<Answer();}
};

float s(float x){return x*x*x-5*x*x+16*x-80;}


int main()
{T *p=new T(4.5,5.5,s);
 p->show();
 delete p;
return 0;
}








13-6
#include<iostream>
#include<fstream>
using namespace std;

int main()
{char ch,f1[200],f2[200];int i=1;

 cout<<"源文件名？";cin>>f1;
 cout<<"目标文件名？";cin>>f2;
 ifstream in(f1);
 ofstream out(f2);
 if(!in) {cout<<"\n不能打开源文件："<<f1;return 1;}
 if(!out) {cout<<"\n不能打开目标文件："<<f2;return 1;}
 in>>noskipws;
 in>>ch;
 if(ch>=97&&ch<=122) ch-=32;
 out<<ch;
 while(in>>ch)
 {  if(ch==9||ch==10||ch==32||ch==44||ch==46) i=0;
    if(i==0&&ch>=65&&ch<=90) i=1;
    if(i==0&&ch>=97&&ch<=122) ch-=32,i=1;
    out<<ch;
 }
 in.close();out.close();
 return 0;
}


13-9
#include<iostream>
#include<fstream>
#include<cmath>
#include<iomanip>
using namespace std;

int main()
{int i,m=0,p;
 ofstream out("prime.txt");
 ofstream outs("prime.dat",ios_base::out|ios_base::binary);
 ifstream in("prime.txt");
 ifstream f("prime.dat",ios_base::in|ios_base::binary);
 if(!out){cout<<"不能打开输出文件prime.txt\n";return 1;}
 if(!outs){cout<<"不能打开prime.dat\n";return 1;}
 if(!in){cout<<"不能打开输入文件prime.txt\n";return 2;}
 if(!f){cout<<"不能打开输入文件prime.dat\n";return 2;} 

 for(i=2;i<100;i++)
 {for(int j=2,n=0;j<=sqrt(i);j++)
   if(i%j==0) n++;
   if(n==0) 
   {m++;
	out<<i<<setw(10);
	outs.write((char *)&i,sizeof(int));
    if(m%5==0) out<<endl;
   }
 }//第七题结束
 out.close();outs.close();//记得关闭打开的文件，否则可能会影响下面同一文件的文件的打开，
                            //操作系统可同时打开的文件数有限

 m=0;//第八题开始
 while(m<25)
 {in>>i;m++;
 if(m>9) {
 cout<<i;
 if((m+1)%5==0) cout<<endl;
 else cout<<'\t';
 }
 }
 in.close();


 
cout<<endl;//第九题开始
f.seekg(9*sizeof(int));
for(m=0;m<16&&f.read((char *)&p,sizeof(int));m++)
{
 cout<<p; 
 if((m+1)%5==0) cout<<endl;
 else cout<<'\t';
} 


return 0;
}
 


13-11
#include<iostream>
#include<fstream>
#include<cstring>
using namespace std;
class student{
	char *name;
	int id;
	float English,Maths;
public:
student(char *a=NULL,int i=0,float e=0,float m=0)
{name=new char[50];if(a) strcpy(name,a);
id=i,English=e,Maths=m;}

friend istream& operator>>(istream&in,student&c1)
{in>>c1.name>>c1.id>>c1.English>>c1.Maths;
 return in; 
}

friend ostream& operator<<(ostream &out,student &c1)
{out<<c1.name<<'\t'<<c1.id<<'\t'<<c1.English<<'\t'<<c1.Maths;
 return out;
}

operator float()
{return English+Maths;}

operator char *()
{return name;}

~student(){delete name;}
};

int main()
{
student man;
cout<<"学生数据（姓名、学号、英语、数学）";
cin>>man;
cout<<man<<endl;
cout<<float(man)<<'\n'<<(char *)(man);
return 0;
}